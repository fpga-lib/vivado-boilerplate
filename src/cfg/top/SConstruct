

import os
import sys
import subprocess
import re
import importlib

sys.dont_write_bytecode = True

from utils import *


#-------------------------------------------------------------------------------
#
#    General Settings
#
cfg  = import_config('cfg.yml')
ext  = import_config('filetype.yml')
dirs = import_config('dirpath.yml')

ConfigName = cfg.NAME
DEVICE     = cfg.DEVICE

ip       = ['pll', 'pcie']


#-------------------------------------------------------------------------------
#
#    Environment
#
env = Environment( tools = {} )

env['SETTINGS_SEARCH_PATH'] = [(dirs.CFG_SETTINGS)]

#-------------------------------------------------------------------------------
#
#    Project Structure
#



#-------------------------------------------------------------------------------
#
#    Builders
#

#---------------------------------------------------------------------
#
#    Build Tcl script to create OOC IP
#
def ip_create_script(target, source, env):

    src = str(source[0])
    trg = str(target[0])
    
    print('building Create IP script ' + trg)

    param_sect = 'config'
    
    ip_name = os.path.splitext( os.path.basename(src) )[0]   # derive IP name from full path 
    ip_cfg  = read_ip_config(src, param_sect)
    
    title_text =\
    'IP core "' + ip_name + '" creating script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually,' + os.linesep + \
    'change parameters of IP in corresponing configuration file (cfg/ip/<IP name>)'
    
    text  = 'set ip_name    ' + ip_name                             + os.linesep*2
    text += 'set DEVICE     ' + cfg.DEVICE                          + os.linesep*2
    text += 'set IP_OOC_DIR ' + dirs.IP_OOC                         + os.linesep
    text += 'set OUT_DIR    [file join ${IP_OOC_DIR} ${ip_name}]'   + os.linesep*2
    text += 'if { [file exists ${OUT_DIR}] } {'                     + os.linesep
    text += '    file delete -force -- ${OUT_DIR}'                  + os.linesep
    text += '}'                                                     + os.linesep*2
    text += 'set_part  ${DEVICE}'                                   + os.linesep
    text += 'create_ip -name ' + ip_cfg['type']
    text += ' -vendor xilinx.com'
    text += ' -library ip'
    text += ' -module_name ${ip_name}'
    text += ' -dir ${IP_OOC_DIR}'                                   + os.linesep*2
    
    ip_params  = ip_cfg[param_sect]
    max_pn_len = max_str_len(ip_params.keys())
    max_pv_len = max_str_len([str(i) for i in ip_params.values()])
    
    for p in ip_params:
        v             = str(ip_params[p])
        name_len      = len(p)
        value_len     = len(v)
        name_padding  = len(param_sect) + max_pn_len - name_len + 2
        value_padding = max_pv_len - value_len + 2
        line  = 'set_property ' + param_sect + '.' + p + ' '*name_padding + v 
        line += ' '*value_padding + '[get_ips ${ip_name}]'
        
        text += line + os.linesep

    text += os.linesep
    text += 'generate_target all [get_ips  ${ip_name}]'             + os.linesep
    text += 'export_ip_user_files -of_objects [get_ips ${ip_name}] '
    text += '-sync -force -quiet'                                   + os.linesep
    text += 'exit'


    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')

    #print(out)
    
    with open(trg, 'w') as ofile:
        ofile.write(out)
    
#---------------------------------------------------------------------
#
#    Build Tcl script to synthesize OOC IP
#
def ip_syn_script(target, source, env):

    src = str(source[0])
    trg = str(target[0])

    print('building Synthesize IP script ' + trg)

    with open(src) as src_f:
        ip_create_script = src_f.read()
        
    ip_name = re.findall('set\s+ip_name\s+(\w+)', ip_create_script)[0] # derive IP name from IP create script

    title_text =\
    'IP core "' + ip_name + '" synthesizing script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually,' + os.linesep + \
    'change parameters of IP in corresponing configuration file (cfg/ip/<IP name>)'

    text  = 'set ip_name    ' + ip_name                             + os.linesep*2
    text += 'set DEVICE     ' + cfg.DEVICE                          + os.linesep*2
    text += 'set IP_OOC_DIR ' + dirs.IP_OOC                         + os.linesep
    text += 'set OUT_DIR    [file join ${IP_OOC_DIR} ${ip_name}]'   + os.linesep*2
    text += 'set_part  ${DEVICE}'                                   + os.linesep
    text += 'read_ip   [file join ${IP_OOC_DIR} ' 
    text += '${ip_name} ${ip_name}.' + ext.IP_CORE +']'             + os.linesep
    text += 'synth_ip  [get_ips ${ip_name}]'                        + os.linesep
    text += 'exit'

    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')

    #print(out)

    with open(trg, 'w') as ofile:
        ofile.write(out)

#---------------------------------------------------------------------
#
#    Generate IP
#
def ip_create(target, source, env):
    
    src = str(source[0])
    trg = str(target[0])
    print('create IP core ' + trg)


    pexec('touch ' + str(target[0]))

#---------------------------------------------------------------------
#
#    Run OOC IP synthesis
#
def ip_synthesize(target, source, env):
    pass


#-------------------------------------------------------------------------------
#
#    Scanners
#
#---------------------------------------------------------------------
#
#    Scanner functions
#
def scan_cfg_files(node, env, path):
    
#    print('scan node:', str(node))    
    fname = str(node)
    with open(fname) as f:
        cfg = yaml.safe_load(f)
        
    if 'import' in cfg:
        imports = []
        for i in cfg['import'].split():
            fn = i + '.' + ext.CONFIG
            full_path = glob.glob(os.path.join('**', fn))
            imports += full_path
        
        #print(imports)
        return env.File(imports)
        
    else:
        return env.File([])
#---------------------------------------------------------------------
    
#-------------------------------------------------------------------------------
#
#    Create scanners
#
    
    
CfgImportScanner = Scanner(name          = 'CfgImportScanner',
                           function      = scan_cfg_files,
                           skeys         = ['.' + ext.IP_CONFIG],
                           recursive     = True,
                           path_function = FindPathDirs('SETTINGS_SEARCH_PATH')
                          )    


#-------------------------------------------------------------------------------
#
#    Create builders
#
IpCreateScript = Builder(action         = ip_create_script,
                         suffix         = ext.TOOL_SCRIPT,
                         #src_suffix     = ext.IP_CONFIG,
                         source_scanner = CfgImportScanner)

IpSynScript    = Builder(action         = ip_syn_script,
                         suffix         = ext.TOOL_SCRIPT
                        )

IpCreate       = Builder(action     = ip_create,
                         suffix     = ext.IP_CORE,
                         src_suffix = ext.TOOL_SCRIPT)
                 
IpSyn          = Builder(action     = ip_synthesize,
                         suffix     = ext.DESIGN_CHECKPOINT,
                         src_suffix = ext.IP_CORE)

env['BUILDERS'] = \
{
    'IP_CREATE_SCRIPT' : IpCreateScript,
    'IP_SYN_SCRIPT'    : IpSynScript,
    'IP_CREATE'        : IpCreate,
    'IP_SYN'           : IpSyn
}
                   
#-------------------------------------------------------------------------------
#
#    Targets
#
def make_trg_nodes(src_list, src_suffix, trg_suffix, trg_dir, builder):
    
    trg_list = []
    for src in src_list:
        if type(src) == str:
            src_str = src
        else:
            src_str = str(src[0])
        src_name = os.path.split(src_str)[1]
        trg_name = src_name.replace(src_suffix, trg_suffix)
        trg      = os.path.join(trg_dir, trg_name)
        trg_list.append( builder(trg, src) )
        
    Depends(trg_list, 'SConstruct')
    return trg_list

#---------------------------------------------------------------------
#
#    Generating create IP script targets
#
ip_src = [os.path.join(dirs.CFG_IP, i + '.' + ext.IP_CONFIG) for i in ip]
ip_create_script_nodes = make_trg_nodes(ip_src, 
                                        '.'+ext.IP_CONFIG, 
                                        '-create.'+ext.TOOL_SCRIPT, 
                                        dirs.IP_SCRIPT,
                                        env.IP_CREATE_SCRIPT)

#---------------------------------------------------------------------
#
#    Generating synthesize IP script targets
#
ip_syn_script_nodes = make_trg_nodes(ip_create_script_nodes, 
                                     '-create.'+ext.TOOL_SCRIPT, 
                                     '-syn.'+ext.TOOL_SCRIPT, 
                                     dirs.IP_SCRIPT,
                                     env.IP_SYN_SCRIPT)
#---------------------------------------------------------------------
#
#    Creating IP core targets
#
ip_nodes = make_trg_nodes(ip_syn_script_nodes, 
                          '-syn.'+ext.TOOL_SCRIPT, 
                          '.'+ext.IP_CORE, 
                          dirs.IP_OOC,
                          env.IP_CREATE)

Default(ip_nodes)
#-------------------------------------------------------------------------------
for i in dirs.OUTPUT:
    if not os.path.exists(i):
        print('scons: create directory "' + i + '"')
        os.makedirs(i)
#-------------------------------------------------------------------------------

