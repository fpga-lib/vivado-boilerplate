#-------------------------------------------------------------------------------
#
#    Xilinx Vivado Non-Project Flow Configuration Tool
#
#    Author: Harry E. Zhurov
#
#-------------------------------------------------------------------------------

import os

import SCons.Builder
import SCons.Scanner

from utils import *

#-------------------------------------------------------------------------------
#
#    External Environment
#
XILINX_VIVADO = os.environ['XILINX_VIVADO']
VIVADO        = os.path.join(XILINX_VIVADO, 'bin', 'vivado')

#-------------------------------------------------------------------------------
#
#    Action functions
#
#---------------------------------------------------------------------
#
#    Build Tcl script to create OOC IP
#
def ip_create_script(target, source, env):

    cfg  = env['CFG']
    ext  = env['EXT']
    dirs = env['DIRS']

    src = str(source[0])
    trg = str(target[0])

    print('generate script:   \'' + os.path.basename(trg) + '\'')

    param_sect = 'config'

    ip_name = os.path.splitext( os.path.basename(src) )[0]   # derive IP name from full path 
    ip_cfg  = read_ip_config(src, param_sect, env['CFG_PATH'])

    title_text =\
    'IP core "' + ip_name + '" creating script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually,' + os.linesep + \
    'change parameters of IP in corresponing configuration file (cfg/ip/<IP name>)'

    text  = 'set ip_name    ' + ip_name                             + os.linesep
    text += 'set DEVICE     ' + cfg.DEVICE                          + os.linesep
    text += 'set IP_OOC_DIR ' + os.path.join(dirs.IP_OOC, ip_name)  + os.linesep*2
    text += 'set_part  ${DEVICE}'                                   + os.linesep
    text += 'create_ip -name ' + ip_cfg['type']
    text += ' -vendor xilinx.com'
    text += ' -library ip'
    text += ' -module_name ${ip_name}'
    text += ' -dir ${IP_OOC_DIR}'                                   + os.linesep*2

    ip_params  = ip_cfg[param_sect]
    max_pn_len = max_str_len(ip_params.keys())
    max_pv_len = max_str_len([str(i) for i in ip_params.values()])

    for p in ip_params:
        v             = str(ip_params[p])
        name_len      = len(p)
        value_len     = len(v)
        name_padding  = len(param_sect) + max_pn_len - name_len + 2
        value_padding = max_pv_len - value_len + 2
        line  = 'set_property ' + param_sect + '.' + p + ' '*name_padding + v 
        line += ' '*value_padding + '[get_ips ${ip_name}]'

        text += line + os.linesep

    text += os.linesep
    text += 'generate_target all [get_ips  ${ip_name}]'             + os.linesep
    text += 'export_ip_user_files -of_objects [get_ips ${ip_name}] '
    text += '-sync -force -quiet'                                   + os.linesep
    text += 'exit'


    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')

    with open(trg, 'w') as ofile:
        ofile.write(out)

    return None
#---------------------------------------------------------------------
#
#    Build Tcl script to synthesize OOC IP
#
def ip_syn_script(target, source, env):

    cfg  = env['CFG']
    ext  = env['EXT']
    dirs = env['DIRS']
    
    src = str(source[0])
    trg = str(target[0])

    print('generate script:   \'' + os.path.basename(trg) + '\'')

    with open(src) as src_f:
        ip_create_script = src_f.read()

   # ip_name = re.findall('set\s+ip_name\s+(\w+)', ip_create_script)[0] # derive IP name from IP create script
    ip_name = os.path.splitext( os.path.basename(src) )[0]   # derive IP name from full path 

    title_text =\
    'IP core "' + ip_name + '" synthesizing script' + os.linesep*2 + \
    'This file is automatically generated. Do not edit the file manually,' + os.linesep + \
    'change parameters of IP in corresponing configuration file (cfg/ip/<IP name>)'

    text  = 'set ip_name    ' + ip_name                             + os.linesep
    text += 'set DEVICE     ' + cfg.DEVICE                          + os.linesep
    text += 'set IP_OOC_DIR ' + dirs.IP_OOC                         + os.linesep
    text += 'set OUT_DIR    [file join ${IP_OOC_DIR} ${ip_name}]'   + os.linesep*2
    text += 'set_part  ${DEVICE}'                                   + os.linesep
    text += 'read_ip   [file join ${IP_OOC_DIR} ' 
    text += '${ip_name} ${ip_name} ${ip_name}.' + ext.IP_CORE +']'  + os.linesep
    text += 'synth_ip  [get_ips ${ip_name}]'                        + os.linesep
    text += 'exit'

    out = generate_title(title_text, '#')
    out += text
    out += generate_footer('#')

    #print(out)

    with open(trg, 'w') as ofile:
        ofile.write(out)

    return None
#---------------------------------------------------------------------
#
#    Generate IP
#
def ip_create(target, source, env):

    cfg  = env['CFG']
    ext  = env['EXT']
    dirs = env['DIRS']

    src     = str(source[0])
    trg     = str(target[0])
    ip_name = os.path.splitext(os.path.basename(trg))[0]
    trg_dir = os.path.join(dirs.IP_OOC, ip_name)
    logfile = os.path.join(trg_dir, 'create.log')

    print('create IP core     \'' + ip_name + '\'')

    Execute( Delete(trg_dir) )        
    Execute( Mkdir(trg_dir) )

    cmd = []
    cmd.append(env['SYNCOM'])
    cmd.append(env['SYNFLAGS'])
    cmd.append('-log ' + logfile)
    cmd.append(' -source ' + os.path.abspath(src))
    cmd = ' '.join(cmd)
    
    if env['VERBOSE']:
        print(cmd)

    rcode = pexec(cmd, trg_dir)

    return rcode

#---------------------------------------------------------------------
#
#    Run OOC IP synthesis
#
def ip_synthesize(target, source, env):

    cfg  = env['CFG']
    ext  = env['EXT']
    dirs = env['DIRS']

    src     = str(source[0])
    trg     = str(target[0])
    ip_name = os.path.splitext(os.path.basename(trg))[0]
    trg_dir = os.path.join(dirs.IP_OOC, ip_name)
    logfile = os.path.join(trg_dir, 'syn.log')

    print('synthesize IP core \'' + ip_name + '\'')

    cmd = []
    cmd.append(env['SYNCOM'])
    cmd.append(env['SYNFLAGS'])
    cmd.append('-log ' + logfile)
    cmd.append(' -source ' + os.path.abspath(src))
    cmd = ' '.join(cmd)

    if env['VERBOSE']:
        print(cmd)
    rcode = pexec(cmd, trg_dir)

    return rcode

#-------------------------------------------------------------------------------
#
#    Scanners
#
#---------------------------------------------------------------------
#
#    Scanner functions
#
def scan_cfg_files(node, env, path):

    ext = env['EXT']
    
    fname = str(node)
    with open(fname) as f:
        cfg = yaml.safe_load(f)

    if 'import' in cfg:
        imports = []
        for i in cfg['import'].split():
            fn = i + '.' + ext.CONFIG
            found = False
            for p in path:
                full_path = os.path.join(p.path, fn)
                if os.path.exists(full_path):
                    imports.append(full_path)
                    found = True
                    break

            if not found:
                print('E: import config file', fn, 'not found')

        return env.File(imports)

    else:
        return env.File([])

#-------------------------------------------------------------------------------
#
#    Targets
#
def make_trg_nodes(src, src_suffix, trg_suffix, trg_dir, builder):

    s0 = src
    if(type(s0)) != str:
        s0 = str(s0[0])

    src_name = os.path.split(s0)[1]
    trg_name = src_name.replace(src_suffix, trg_suffix)
    trg      = os.path.join(trg_dir, trg_name)
    trg_list = builder(trg, src)

    #Depends(trg_list, 'top.scons')
    return trg_list

#---------------------------------------------------------------------
#
#    Processing OOC IP targets
#
def ip_create_scripts(env, src):
    ext     = env['EXT']
    dirs    = env['DIRS']
    res     = []
    src_sfx = '.'+ext.IP_CONFIG
    trg_sfx = '-create.'+ext.TOOL_SCRIPT
    trg_dir = dirs.IP_SCRIPT
    builder = env.IpCreateScript
    for i in src:
        ip_src = os.path.join(dirs.CFG_IP, i + '.' + ext.IP_CONFIG)
        res.append(make_trg_nodes(ip_src, src_sfx, trg_sfx, trg_dir, builder))    

    return res
#---------------------------------------------------------------------
def ip_syn_scripts(env, src):
    ext     = env['EXT']
    dirs    = env['DIRS']
    res     = []
    src_sfx = '.'+ext.IP_CONFIG
    trg_sfx = '-syn.'+ext.TOOL_SCRIPT
    trg_dir = dirs.IP_SCRIPT
    builder = env.IpSynScript
    for i in src:
        ip_src = os.path.join(dirs.CFG_IP, i + '.' + ext.IP_CONFIG)
        res.append(make_trg_nodes(ip_src, src_sfx, trg_sfx, trg_dir, builder))    

    return res
#---------------------------------------------------------------------
def create_ips(env, src):
    ext     = env['EXT']
    dirs    = env['DIRS']
    res     = []
    src_sfx = '-create.'+ext.TOOL_SCRIPT
    trg_sfx = '.'+ext.IP_CORE
    builder = env.IpCreate
    for i in src:
        ip_name = get_ip_name(i, src_sfx)
        trg_dir = os.path.join( dirs.IP_OOC, ip_name, ip_name )
        res.append(make_trg_nodes(i, src_sfx, trg_sfx, trg_dir, builder))    

    return res
#---------------------------------------------------------------------
def syn_ips(env, src, deps=None):
    if deps:
        if len(src) != len(deps):
            print('E: ip_syn: src count:', len(src), 'must be equal deps count:', len(deps))
            sys.exit(2)

        src = list(zip(src, deps))
    else:
        print('E: ip_syn: "deps" argument (typically xci IP Core node list) not specified')
        sys.exit(2)

    ext         = env['EXT']
    dirs        = env['DIRS']
    res         = []
    script_sfx  = '-syn.'+ext.TOOL_SCRIPT
    ip_core_sfx = '.' + ext.IP_CORE
    trg_sfx     = '.'+ext.DESIGN_CHECKPOINT
    builder     = env.IpSyn
    for i in src:
        s = i[0]
        d = i[1]

        ip_name = get_ip_name(s, script_sfx)
        trg_dir = os.path.join( dirs.IP_OOC, ip_name, ip_name )
        trg = make_trg_nodes(s + d, script_sfx, trg_sfx, trg_dir, builder)
        res.append(trg)

    return res
#---------------------------------------------------------------------

#-------------------------------------------------------------------------------
#
#    Set up tool construction environment
#
def generate(env):
    
    ext = env['EXT']
    
    Scanner = SCons.Scanner.Scanner
    Builder = SCons.Builder.Builder
    
    env['SYNCOM']   = VIVADO + ' -mode batch '
    env['SYNSHELL'] = VIVADO + ' -mode tcl '
    env['SYNGUI']   = VIVADO + ' -mode gui '
    
    env['VERBOSE'] = True
    
    #-----------------------------------------------------------------
    #
    #   Scanners
    #
    CfgImportScanner = Scanner(name          = 'CfgImportScanner',
                       function      = scan_cfg_files,
                       skeys         = ['.' + ext.IP_CONFIG],
                       recursive     = True,
                       path_function = SCons.Scanner.FindPathDirs('SETTINGS_SEARCH_PATH')
                      )    

    #-----------------------------------------------------------------
    #
    #   Builders
    #
    IpCreateScript = Builder(action         = ip_create_script,
                             suffix         = ext.TOOL_SCRIPT,
                             #src_suffix     = ext.IP_CONFIG,
                             source_scanner = CfgImportScanner)

    IpSynScript    = Builder(action         = ip_syn_script,
                             suffix         = ext.TOOL_SCRIPT,
                             source_scanner = CfgImportScanner)
                            

    IpCreate       = Builder(action     = ip_create,
                             suffix     = ext.IP_CORE,
                             src_suffix = ext.TOOL_SCRIPT)

    IpSyn          = Builder(action     = ip_synthesize,
                             suffix     = ext.DESIGN_CHECKPOINT,
                             src_suffix = ext.IP_CORE)
    
        
    Builders = {
        'IpCreateScript' : IpCreateScript,
        'IpSynScript'    : IpSynScript,
        'IpCreate'       : IpCreate,
        'IpSyn'          : IpSyn
    }

    env.Append(BUILDERS = Builders)
    
    #-----------------------------------------------------------------
    #
    #   IP core processing pseudo-builders
    #
    env.AddMethod(ip_create_scripts, 'IpCreateScripts')
    env.AddMethod(ip_syn_scripts,    'IpSynScripts')
    env.AddMethod(create_ips,        'CreateIps')
    env.AddMethod(syn_ips,           'SynIps')
    
        
#-------------------------------------------------------------------------------
def exists(env):
    print('vivado-npf tool: exists')
#-------------------------------------------------------------------------------
    
